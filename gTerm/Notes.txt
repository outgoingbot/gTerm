I need to fix how we connect to the Serial port. Much of it is done automatically at launch, this needs to occur on connect. <--Done
-I can create all the serial objects but I want to Connect and start the Thread when I connect. <--Done
-I want to Stop the Thread and Disconnect when I click Disconnect button <--Done


I need to fuzz the serial port hard and make sure im getting good performance <--Fixed/Done
-some issues that could cause performance drop is:
--Poor buffer handeling
--excessive sleeps in the thread (using sleep to limit CPU usage.)

Have an issue where when I CreateFile for the hSerial it throws error code 5
-ERROR_ACCESS_DENIED (5)	<-- Fixed. Solved was opening two terminal windows but only drawing one. Only 1 Terminal per Comm Port

I think there is some bug with connecting to the com port on windows. something needs to be force closed or a buffer cleared or something
I sometimes have to open the serial port ,im trying to use with gTerm, to 'clean' the comm port so it works

THere are issues with hardware unplug disconnects and ports no longer existing. there need to be a mechanism that
checks the serial port is still connected/exists (polling 100ms is OK, interrrupt better)

So DO i need to constatly read the serial port list and compare any changes ?
-OR-
is there a kernel interrupt (thru Linux and Win OS drivers)?

 The text in the terminal_output window needs to be selectable.
 100% cursor interaction (i.e. click postion and text selection)

 I fuzzed the srial pore hard. there is a bug
 - i think i overflow a deque array somehow. I blame chatGPT.
 Not for nothin, theres some low level serial bugs. (data too fast, burst, actually is connected,disconnected() etc)

 also, when I click the narduino nano resets. The DTR pulse is sent on RS232comm connect() <- GREAT!

 --SERIAL PARSING ETC--
	/// I NEED TO PUT BETTER THOUGHT ON HOW IM GOING TO HANDLE THE CHARACTER-BY-CHARACTER EVALUATION IN GENERAL BEFORE I IMPLENET CONTROL BUTTONS
	//  I THINK IM GOING TO, YET AGAIN :( , NEED A ANOTHER RX DATA BUFFER. IT WILL BE A DISPLAY BUFFER

	1)OS SERIAL DRIVER has 'FiLE' that acts as a kernel level buffer. (auto emptied on FILE READ)
	2)SERIAL MANANAGER pulls the chars from the kernel FILE into a temporary fixed size buffer
	3)SERIAL MANANAGER pushes that buffer contents in to a dynamic deque<char> array
	4)SERIAL MANANAGER must mutex lock that deque<char> array when reading and writing
	  -Therefore, we have void pushData(char*) and void getData(deque<char>*) to implement the mutex
	5) This means Terminal.cpp must also have a deque<char> buffer to serialManObj->copyData() into.
	6) Terminal now has a exact copy of the 10000 characters.

	I need to constantly:
		-Read each character, starting at deque.big() to deque.end().
		-keep track of the character postion index AND evaluate the character (to performs some logic)
		  THIS NEEDS TO BE A STATE MACHINE !?
		-Now the important part, we will build a new std::string for display in terminal_outptut on every loop
			1)We will insert characters and maybe remove characters (modify the string)
			2) Based on our character evaluation, we can perform ImGui operations (PushStyle and PopStyle)